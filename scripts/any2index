#!/usr/bin/env perl 

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use File::Basename qw/basename/;
use Bio::Tools::GuessSeqFormat ();
use File::Which qw/which/;

our $VERSION = 0.1;

local $0 = basename $0;
sub logmsg{local $0=basename $0; print STDERR "$0: @_\n";}

our %indexSub = (
  fasta => sub{indexFasta(@_)},
  bam   => sub{indexBam(@_)},
);

# Check executables
sub checkEnv{
  for my $exe(qw(samtools)){
    which($exe) or logmsg "WARNING: could not find $exe in your path";
  }
}

exit(main());

sub main{
  my $settings={};
  GetOptions($settings,qw(help nocheck)) or die $!;
  usage() if($$settings{help} || !@ARGV);

  # By default, check dependencies. Users might not want
  # to check all dependencies and so they can stop it
  # with --nocheck
  if(defined($$settings{nocheck})){
    checkEnv();
  }

  for my $infile(@ARGV){
    if(-d $infile){
      logmsg "SKIP: directory $infile";
      next;
    }
    indexFile($infile,$settings);
  }

  return 0;
}

sub indexFile{
  my($infile, $settings) = @_;
  my $guesser = Bio::Tools::GuessSeqFormat->new( -file => $infile );
  my $format  = $guesser->guess() || "";
  $format = lc($format); # ensure it's easy to string match later

  if(!$format || $format eq 'raw'){
    logmsg "SKIP: I could not understand the format for $infile";
    return 0;
  }

  if(!$indexSub{$format}){
    die "ERROR: do not know how to format $infile with format $format";
  }

  # Call the indexing function based on the file format,
  # using the %indexSub hash.
  logmsg "Indexing '$infile' ($format)";
  $indexSub{$format}($infile, $settings);
}

# Index a fasta with whichever methods
sub indexFasta{
  my($fasta, $settings) = @_;
  samtoolsFaidx($fasta, $settings);
  bowtie2Build($fasta, $settings);
  makeBlastDb($fasta, $settings);
}

# Index a fasta with samtools faidx
sub samtoolsFaidx{
  my($fasta, $settings) = @_;
  system("samtools faidx '$fasta'");
  if($?){
    die "Could not run samtools faidx '$fasta': $!";
  }
}

# Index a fasta with bowtie2-build
sub bowtie2Build{
  my($fasta, $settings) = @_;
  system("bowtie2-build '$fasta' '$fasta'");
  if($?){
    die "Could not run bowtie2-build on '$fasta': $!";
  }
}

# Make a blast+ database
# TODO detect nucleotide or protein instead of assuming nucleotide
sub makeBlastDb{
  my($fasta, $settings) = @_;
  system("makeblastdb -in '$fasta' -dbtype nucl -parse_seqids");
  if($?){
    die "Could not make a blast database on '$fasta': $!";
  }
}

# Index a bam file
sub indexBam{
  my($bam, $settings) = @_;
  samtoolsIndexBam($bam, $settings);
}
# Index a bam file with samtools index
sub samtoolsIndexBam{
  my($bam, $settings) = @_;
  system("samtools index '$bam'");
  if($?){
    die "Could not index with samtools '$bam': $!";
  }
}

sub usage{
  print "$0: indexes any bioinformatics file appropriately
  Usage: $0 [options] file.ext
  --nocheck  Do not check dependencies
  --help     This useful help menu
";
  exit 0;
}

