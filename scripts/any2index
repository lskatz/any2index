#!/usr/bin/env perl 

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use File::Basename qw/basename/;
use Bio::Tools::GuessSeqFormat ();
use File::Which qw/which/;
use FindBin qw/$RealBin/;
use lib "$RealBin/../lib/perl5";

our $VERSION = 0.2;

# A hash of formats, then individual methods.
# For each individual method, required keys are
#   * command => the linux command. __FILE__ for infile
#   * help    => description
#   * querying=> description on how to query this index
my %indexes = (
  fasta => {
    samtoolsFaidx => {
      command => "samtools faidx __FILE__",
      help    => "Indexes for the samtools package",
      querying=> "samtools faidx __FILE__ contig:start-stop",
    },
    bowtie2Build  => {
      command => "bowtie2-build __FILE__ __FILE__",
      help    => "Indexes for bowtie2",
      querying=> "bowtie2 -x __FILE__ -p __THREADS__ -1 R1.fastq.gz -2 R2.fastq.gz > out.sam",
    },
    makeBlastDb   => {
      command => "makeblastdb -in __FILE__ -dbtype nucl -parse_seqids",
      help    => "Indexes BLASTn",
      querying=> "blastn -in __FILE__ -query QUERY.fasta",
    },
  },
  bam   => {
    samtoolsIndex => {
      command => "samtools index __FILE__",
      help    => "Indexes a bam for samtools",
      querying=> "samtools view __FILE__",
    },
  },
);

# Ensure the integrity of the indexing hash
sub sanityCheckOnIndexMethods{
  my($settings) = @_;

  while(my($format, $indexing) = each(%indexes)){
    while(my($indexer, $struct) = each(%$indexing)){
      # Check for required keys
      for my $key(qw(help command querying)){
        if(!$$struct{$key}){
          die "ERROR: indexing hash does not have a $key key";
        }
      }
    }
  }
}


local $0 = basename $0;
sub logmsg{local $0=basename $0; print STDERR "$0: @_\n";}

# Check executables
sub checkEnv{
  for my $exe(qw(samtools)){
    which($exe) or logmsg "WARNING: could not find $exe in your path";
  }
}

exit(main());

sub main{
  my $settings={};
  GetOptions($settings,qw(help nocheck dryrun|dry-run)) or die $!;
  usage() if($$settings{help} || !@ARGV);

  # By default, check dependencies. Users might not want
  # to check all dependencies and so they can stop it
  # with --nocheck
  if(defined($$settings{nocheck})){
    checkEnv();
  }

  sanityCheckOnIndexMethods($settings);

  my $guesser = Bio::Tools::GuessSeqFormat->new();

  for my $infile(@ARGV){
    if(-d $infile){
      logmsg "SKIP: directory $infile";
      next;
    }
    logmsg "FILE: $infile";

    # Guess the file format
    $guesser->file($infile);
    # ... but don't spin wheels on things we can't index
    my $format = $guesser->guess;
    if(!$format){
      logmsg "SKIP: I do not understand format for $infile";
      next;
    }
    if(!$indexes{$format}){
      logmsg "SKIP: I do not understand format '$format' for $infile";
      next;
    }

    # Run the index commands
    for my $indexer(sort keys(%{ $indexes{$format} })){
      my $command = $indexes{$format}{$indexer}{command};

      # Replace any resrved words and evaluate them
      $command =~ s/__FILE__/'$infile'/g;

      if($$settings{'dryrun'}){
        print "$command\n";
      } else {
        my $failed = system($command.">& /dev/null");
        if($failed){
          die "ERROR with running $command: $!\n  Error on $infile and $indexer";
        }
      }
    }
  }

  return 0;
}

sub usage{
  print "$0: indexes any bioinformatics file appropriately
  Usage: $0 [options] file.ext
  --nocheck  Do not check dependencies
  --dry-run  Print the commands to stdout and do not execute
  --help     This useful help menu
";
  exit 0;
}

